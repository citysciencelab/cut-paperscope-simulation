# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
#	INCLUDES
#
# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import shutil

# qgis
from qgis.core import *
from qgis.gui import  QgsMapCanvas
QgsApplication.setPrefixPath("/usr", True)
from processing.core.Processing import Processing
from processing_umep.processing_umep_provider import ProcessingUMEPProvider

#paperscope
from paperscope_simulation.paperscope import PaperScope



# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
#	CLASS
#
# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class Qgis:
    

    @staticmethod
    def init():

        global qgsApp
        global umep

        # create QGIS application
        qgsApp = QgsApplication([], False)
        QgsApplication.initQgis()
        Processing.initialize()

        # add umep plugin to qgis
        umep = ProcessingUMEPProvider()
        QgsApplication.processingRegistry().addProvider(umep)



#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
#	PROJECT
#
#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      

    @staticmethod
    def saveProject(basePath, simulation, project):

        projectName = simulation['model'].replace(":", "_")

        # write project file
        QgsProject.instance().write(f"{basePath}{projectName}.qgs")

        # create zip file
        shutil.make_archive(f"{basePath}project", 'zip', basePath)

        PaperScope.updateSimulationStatus(simulation, project, "successful")



# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# // end class
